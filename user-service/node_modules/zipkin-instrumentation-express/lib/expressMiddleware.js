"use strict";

var _require = require('zipkin'),
    _require$option = _require.option,
    Some = _require$option.Some,
    None = _require$option.None,
    Instrumentation = _require.Instrumentation;

var url = require('url');
/**
 * @private
 * @param {http.IncomingMessage} req
 * @return {string}
 */


function formatRequestUrl(req) {
  var parsed = url.parse(req.originalUrl);
  return url.format({
    protocol: req.protocol,
    host: req.get('host'),
    pathname: parsed.pathname,
    search: parsed.search
  });
}
/**
 * @typedef {Object} MiddlewareOptions
 * @property {Object} tracer
 * @property {string} serviceName
 * @property {number} port
 */

/**
 * @param {MiddlewareOptions}
 * @return {ZipkinMiddleware}
 */


module.exports = function expressMiddleware(_ref) {
  var tracer = _ref.tracer,
      serviceName = _ref.serviceName,
      _ref$port = _ref.port,
      port = _ref$port === void 0 ? 0 : _ref$port;
  var instrumentation = new Instrumentation.HttpServer({
    tracer: tracer,
    serviceName: serviceName,
    port: port
  });
  /**
   * @method
   * @typedef {function} ZipkinMiddleware
   * @param {http.IncomingMessage} req
   * @param {http.ServerResponse} res
   * @param {function()} next
   */

  return function zipkinExpressMiddleware(req, res, next) {
    function readHeader(header) {
      var val = req.header(header);

      if (val != null) {
        return new Some(val);
      } else {
        return None;
      }
    }

    tracer.scoped(function () {
      var id = instrumentation.recordRequest(req.method, formatRequestUrl(req), readHeader);
      Object.defineProperty(req, '_trace_id', {
        configurable: false,
        get: function get() {
          return id;
        }
      });
      /**
       * records response on finish or close (whichever happens first)
       * @listens close
       * @listens finish
       */

      var onCloseOrFinish = function onCloseOrFinish() {
        res.removeListener('close', onCloseOrFinish);
        res.removeListener('finish', onCloseOrFinish);
        tracer.letId(id, function () {
          // if route is terminated on middleware req.route won't be available
          var route = req.route && req.route.path;
          tracer.recordRpc(instrumentation.spanNameFromRoute(req.method, route, res.statusCode));
          instrumentation.recordResponse(id, res.statusCode);
        });
      };

      res.once('close', onCloseOrFinish);
      res.once('finish', onCloseOrFinish);
      next();
    }); // don't leak the trace ID from recordRequest
  };
};