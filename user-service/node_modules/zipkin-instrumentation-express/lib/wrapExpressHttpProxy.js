"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('zipkin'),
    Request = _require.Request,
    Annotation = _require.Annotation;

var url = require('url');

function getPathnameFromPath(path) {
  var parsedPath = url.parse(path);
  return parsedPath.pathname;
}

var ExpressHttpProxyInstrumentation = /*#__PURE__*/function () {
  function ExpressHttpProxyInstrumentation(_ref) {
    var tracer = _ref.tracer,
        _ref$serviceName = _ref.serviceName,
        serviceName = _ref$serviceName === void 0 ? tracer.localEndpoint.serviceName : _ref$serviceName,
        remoteServiceName = _ref.remoteServiceName;

    _classCallCheck(this, ExpressHttpProxyInstrumentation);

    this.tracer = tracer;
    this.serviceName = serviceName;
    this.remoteServiceName = remoteServiceName;
  }

  _createClass(ExpressHttpProxyInstrumentation, [{
    key: "decorateAndRecordRequest",
    value: function decorateAndRecordRequest(serverReq, proxyReq, serverTraceId) {
      var _this = this;

      return this.tracer.letId(serverTraceId, function () {
        var clientTraceId = _this.tracer.createChildId();

        _this.tracer.setId(clientTraceId);

        var proxyReqWithZipkinHeaders = Request.addZipkinHeaders(proxyReq, clientTraceId);
        Object.defineProperty(serverReq, '_trace_id_proxy', {
          configurable: false,
          get: function get() {
            return clientTraceId;
          }
        });

        _this._recordRequest(proxyReqWithZipkinHeaders);

        return proxyReqWithZipkinHeaders;
      });
    }
  }, {
    key: "_recordRequest",
    value: function _recordRequest(proxyReq) {
      this.tracer.recordServiceName(this.serviceName);
      this.tracer.recordRpc(proxyReq.method.toUpperCase());
      this.tracer.recordBinary('http.path', getPathnameFromPath(proxyReq.path));
      this.tracer.recordAnnotation(new Annotation.ClientSend());

      if (this.remoteServiceName) {
        this.tracer.recordAnnotation(new Annotation.ServerAddr({
          serviceName: this.remoteServiceName,
          port: parseInt(proxyReq.port)
        }));
      }
    }
  }, {
    key: "recordResponse",
    value: function recordResponse(rsp, clientTraceId) {
      var _this2 = this;

      this.tracer.letId(clientTraceId, function () {
        _this2.tracer.recordBinary('http.status_code', rsp.statusCode.toString());

        _this2.tracer.recordAnnotation(new Annotation.ClientRecv());
      });
    }
  }]);

  return ExpressHttpProxyInstrumentation;
}();

function wrapProxy(proxy, _ref2) {
  var tracer = _ref2.tracer,
      serviceName = _ref2.serviceName,
      remoteServiceName = _ref2.remoteServiceName;
  return function zipkinProxy(host) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    function wrapDecorateRequest(instrumentation, decorateRequest) {
      return function (proxyReq, serverReq) {
        var serverTraceId = serverReq._trace_id;
        var wrappedProxyReq = proxyReq;

        if (typeof decorateRequest === 'function') {
          tracer.letId(serverTraceId, function () {
            wrappedProxyReq = decorateRequest(proxyReq, serverReq);
          });
        }

        return instrumentation.decorateAndRecordRequest(serverReq, wrappedProxyReq, serverTraceId);
      };
    }

    function wrapIntercept(instrumentation, intercept) {
      return function (rsp, data, serverReq, res, callback) {
        var instrumentedCallback = function instrumentedCallback(err, rspd, sent) {
          instrumentation.recordResponse(rsp, serverReq._trace_id_proxy);
          return callback(err, rspd, sent);
        };

        var serverTraceId = serverReq._trace_id;

        if (typeof intercept === 'function') {
          tracer.letId(serverTraceId, function () {
            return intercept(rsp, data, serverReq, res, instrumentedCallback);
          });
        } else {
          instrumentedCallback(null, data);
        }
      };
    }

    var instrumentation = new ExpressHttpProxyInstrumentation({
      tracer: tracer,
      serviceName: serviceName,
      remoteServiceName: remoteServiceName
    });
    var wrappedOptions = options;
    var decorateRequest = wrappedOptions.decorateRequest;
    wrappedOptions.decorateRequest = wrapDecorateRequest(instrumentation, decorateRequest);
    var intercept = wrappedOptions.intercept;
    wrappedOptions.intercept = wrapIntercept(instrumentation, intercept);
    return proxy(host, wrappedOptions);
  };
}

module.exports = wrapProxy;